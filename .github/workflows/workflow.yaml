name: 🏷️ CI 🚀 CD  🏷️
on:
  pull_request:
    branches:
      - develop
      - main
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - develop
      - main
    tags:
      - v*
      - baseimage-v*
      - testimage-v*
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - uat
          - preprod
          - prod
      image-tag:
        description: 'Image tag to deploy'
        required: true
        type: string


permissions:
  id-token: write
  contents: read

jobs:
  initial:
    name: 🔸 Initial
    uses: dga-devops/miniapps-workflows/.github/workflows/initial.yaml@main

  test:
    name: 🔸 Test
    needs: [ initial ]
    if: ${{ needs.initial.outputs.is-test == 'true' }}
    uses: dga-devops/miniapps-workflows-nestjs/.github/workflows/unit-test-nestjs.yaml@develop
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      ignore-unit-test-error: ${{ needs.initial.outputs.ignore-unit-test-error == 'true' }}
      test-image-name: ${{ needs.initial.outputs.test-image-name }}
      test-image-tag: ${{ needs.initial.outputs.test-image-tag }}

  scan:
    name: 🔸 Sonar Scan
    needs: [ initial, test ]
    if: ${{
      always() &&
      needs.initial.outputs.is-scan == 'true' &&
      (
      needs.test.result == 'success' ||
      needs.test.result == 'skipped' ||
      needs.initial.outputs.ignore-unit-test-error == 'true'
      )
      }}
    uses: dga-devops/miniapps-workflows-nestjs/.github/workflows/sonar-scan-nestjs.yaml@develop
    with:
      ignore-sonar-quality: ${{ needs.initial.outputs.ignore-sonar-quality == 'true' }}
      sonar-project-key: ${{ needs.initial.outputs.sonar-project-key }}
      sonar-host-url: ${{ needs.initial.outputs.sonar-host-url }}
      source-code-directory: ${{ needs.initial.outputs.sonar-scan-source-code-target }}
    secrets:
      sonar-token: ${{ secrets.SONAR_TOKEN }}

  build:
    name: 🔸 Build
    needs: [ initial, test, scan ]
    if: ${{
      always() &&
      needs.initial.outputs.is-build == 'true' &&
      (
      needs.scan.result == 'success' ||
      needs.scan.result == 'skipped' ||
      needs.initial.outputs.ignore-sonar-quality == 'true'
      )
      }}
    uses: dga-devops/miniapps-workflows/.github/workflows/build-push.yaml@main
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      image-name: ${{ needs.initial.outputs.image-name }}
      image-tag: ${{ needs.initial.outputs.image-tag }}
      build-spec: ${{ needs.initial.outputs.build-spec }}

  deploy:
    name: 🔸 Deploy
    needs: [ initial, build ]
    if: ${{
      always() &&
      (needs.initial.outputs.is-deploy == 'true') &&
      (
      needs.build.result == 'success' ||
      (needs.initial.outputs.is-build == 'false' && needs.build.result == 'skipped' )
      )
      }}
    uses: dga-devops/miniapps-workflows/.github/workflows/deploy.yaml@main
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      image-name: ${{ needs.initial.outputs.image-name }}
      image-tag: ${{ needs.initial.outputs.image-tag }}
      cluster-name: ${{ needs.initial.outputs.cluster-name }}
      service-name: ${{ needs.initial.outputs.service-name }}
      task-definition-name: ${{ needs.initial.outputs.task-definition-name }}
      container-name: ${{ needs.initial.outputs.container-name }}
